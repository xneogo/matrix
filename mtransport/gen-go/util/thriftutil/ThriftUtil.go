// Code generated by Thrift Compiler (0.21.0). DO NOT EDIT.

package thriftutil

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Code
//  - Msg
// 
type ErrInfo struct {
	Code int32 `thrift:"code,1,required" db:"code" json:"code"`
	Msg string `thrift:"msg,2,required" db:"msg" json:"msg"`
}

func NewErrInfo() *ErrInfo {
	return &ErrInfo{}
}



func (p *ErrInfo) GetCode() int32 {
	return p.Code
}



func (p *ErrInfo) GetMsg() string {
	return p.Msg
}

func (p *ErrInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCode bool = false;
	var issetMsg bool = false;

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetCode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCode{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
	}
	if !issetMsg{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"));
	}
	return nil
}

func (p *ErrInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *ErrInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *ErrInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ErrInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ErrInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *ErrInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *ErrInfo) Equals(other *ErrInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Code != other.Code { return false }
	if p.Msg != other.Msg { return false }
	return true
}

func (p *ErrInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ErrInfo(%+v)", *p)
}

func (p *ErrInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*thriftutil.ErrInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ErrInfo)(nil)

func (p *ErrInfo) Validate() error {
	return nil
}

// Attributes:
//  - UID
//  - Source
//  - IP
//  - Region
//  - Dt
//  - Unionid
//  - Did
//  - Zone
//  - ZoneName
// 
type Head struct {
	UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
	Source int32 `thrift:"source,2" db:"source" json:"source"`
	IP string `thrift:"ip,3" db:"ip" json:"ip"`
	Region string `thrift:"region,4" db:"region" json:"region"`
	Dt int32 `thrift:"dt,5" db:"dt" json:"dt"`
	Unionid string `thrift:"unionid,6" db:"unionid" json:"unionid"`
	Did string `thrift:"did,7" db:"did" json:"did"`
	Zone int32 `thrift:"zone,8" db:"zone" json:"zone"`
	ZoneName string `thrift:"zone_name,9" db:"zone_name" json:"zone_name"`
}

func NewHead() *Head {
	return &Head{}
}



func (p *Head) GetUID() int64 {
	return p.UID
}



func (p *Head) GetSource() int32 {
	return p.Source
}



func (p *Head) GetIP() string {
	return p.IP
}



func (p *Head) GetRegion() string {
	return p.Region
}



func (p *Head) GetDt() int32 {
	return p.Dt
}



func (p *Head) GetUnionid() string {
	return p.Unionid
}



func (p *Head) GetDid() string {
	return p.Did
}



func (p *Head) GetZone() int32 {
	return p.Zone
}



func (p *Head) GetZoneName() string {
	return p.ZoneName
}

func (p *Head) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Head) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *Head) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Source = v
	}
	return nil
}

func (p *Head) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *Head) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *Head) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Dt = v
	}
	return nil
}

func (p *Head) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Unionid = v
	}
	return nil
}

func (p *Head) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Did = v
	}
	return nil
}

func (p *Head) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Zone = v
	}
	return nil
}

func (p *Head) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ZoneName = v
	}
	return nil
}

func (p *Head) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Head"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Head) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *Head) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "source", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Source)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source: ", p), err)
	}
	return err
}

func (p *Head) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ip", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ip: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ip: ", p), err)
	}
	return err
}

func (p *Head) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "region", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:region: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Region)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.region (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:region: ", p), err)
	}
	return err
}

func (p *Head) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "dt", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dt: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Dt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dt (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dt: ", p), err)
	}
	return err
}

func (p *Head) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "unionid", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:unionid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Unionid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unionid (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:unionid: ", p), err)
	}
	return err
}

func (p *Head) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "did", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:did: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Did)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.did (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:did: ", p), err)
	}
	return err
}

func (p *Head) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "zone", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:zone: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Zone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.zone (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:zone: ", p), err)
	}
	return err
}

func (p *Head) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "zone_name", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:zone_name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ZoneName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.zone_name (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:zone_name: ", p), err)
	}
	return err
}

func (p *Head) Equals(other *Head) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UID != other.UID { return false }
	if p.Source != other.Source { return false }
	if p.IP != other.IP { return false }
	if p.Region != other.Region { return false }
	if p.Dt != other.Dt { return false }
	if p.Unionid != other.Unionid { return false }
	if p.Did != other.Did { return false }
	if p.Zone != other.Zone { return false }
	if p.ZoneName != other.ZoneName { return false }
	return true
}

func (p *Head) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Head(%+v)", *p)
}

func (p *Head) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*thriftutil.Head",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Head)(nil)

func (p *Head) Validate() error {
	return nil
}

// Attributes:
//  - Route
//  - Ct
//  - Et
//  - Caller
// 
type Control struct {
	Route *Route `thrift:"route,1" db:"route" json:"route,omitempty"`
	Ct int64 `thrift:"ct,2" db:"ct" json:"ct"`
	Et int64 `thrift:"et,3" db:"et" json:"et"`
	Caller *Endpoint `thrift:"caller,4" db:"caller" json:"caller,omitempty"`
}

func NewControl() *Control {
	return &Control{}
}

var Control_Route_DEFAULT *Route

func (p *Control) GetRoute() *Route {
	if !p.IsSetRoute() {
		return Control_Route_DEFAULT
	}
	return p.Route
}



func (p *Control) GetCt() int64 {
	return p.Ct
}



func (p *Control) GetEt() int64 {
	return p.Et
}

var Control_Caller_DEFAULT *Endpoint

func (p *Control) GetCaller() *Endpoint {
	if !p.IsSetCaller() {
		return Control_Caller_DEFAULT
	}
	return p.Caller
}

func (p *Control) IsSetRoute() bool {
	return p.Route != nil
}

func (p *Control) IsSetCaller() bool {
	return p.Caller != nil
}

func (p *Control) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Control) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Route = &Route{}
	if err := p.Route.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Route), err)
	}
	return nil
}

func (p *Control) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Ct = v
	}
	return nil
}

func (p *Control) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Et = v
	}
	return nil
}

func (p *Control) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.Caller = &Endpoint{}
	if err := p.Caller.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Caller), err)
	}
	return nil
}

func (p *Control) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Control"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Control) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRoute() {
		if err := oprot.WriteFieldBegin(ctx, "route", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:route: ", p), err)
		}
		if err := p.Route.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Route), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:route: ", p), err)
		}
	}
	return err
}

func (p *Control) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ct", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ct: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Ct)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ct (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ct: ", p), err)
	}
	return err
}

func (p *Control) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "et", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:et: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Et)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.et (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:et: ", p), err)
	}
	return err
}

func (p *Control) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCaller() {
		if err := oprot.WriteFieldBegin(ctx, "caller", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:caller: ", p), err)
		}
		if err := p.Caller.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Caller), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:caller: ", p), err)
		}
	}
	return err
}

func (p *Control) Equals(other *Control) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Route.Equals(other.Route) { return false }
	if p.Ct != other.Ct { return false }
	if p.Et != other.Et { return false }
	if !p.Caller.Equals(other.Caller) { return false }
	return true
}

func (p *Control) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Control(%+v)", *p)
}

func (p *Control) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*thriftutil.Control",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Control)(nil)

func (p *Control) Validate() error {
	return nil
}

// Attributes:
//  - Group
// 
type Route struct {
	Group string `thrift:"group,1" db:"group" json:"group"`
}

func NewRoute() *Route {
	return &Route{}
}



func (p *Route) GetGroup() string {
	return p.Group
}

func (p *Route) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Route) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Group = v
	}
	return nil
}

func (p *Route) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Route"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Route) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "group", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Group)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.group (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group: ", p), err)
	}
	return err
}

func (p *Route) Equals(other *Route) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Group != other.Group { return false }
	return true
}

func (p *Route) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Route(%+v)", *p)
}

func (p *Route) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*thriftutil.Route",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Route)(nil)

func (p *Route) Validate() error {
	return nil
}

// Attributes:
//  - Sname
//  - Sid
//  - Method
// 
type Endpoint struct {
	Sname string `thrift:"sname,1" db:"sname" json:"sname"`
	Sid string `thrift:"sid,2" db:"sid" json:"sid"`
	Method string `thrift:"method,3" db:"method" json:"method"`
}

func NewEndpoint() *Endpoint {
	return &Endpoint{}
}



func (p *Endpoint) GetSname() string {
	return p.Sname
}



func (p *Endpoint) GetSid() string {
	return p.Sid
}



func (p *Endpoint) GetMethod() string {
	return p.Method
}

func (p *Endpoint) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Endpoint) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Sname = v
	}
	return nil
}

func (p *Endpoint) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Sid = v
	}
	return nil
}

func (p *Endpoint) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Method = v
	}
	return nil
}

func (p *Endpoint) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Endpoint"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Endpoint) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sname: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Sname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sname: ", p), err)
	}
	return err
}

func (p *Endpoint) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Sid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sid: ", p), err)
	}
	return err
}

func (p *Endpoint) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "method", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:method: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Method)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.method (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:method: ", p), err)
	}
	return err
}

func (p *Endpoint) Equals(other *Endpoint) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Sname != other.Sname { return false }
	if p.Sid != other.Sid { return false }
	if p.Method != other.Method { return false }
	return true
}

func (p *Endpoint) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Endpoint(%+v)", *p)
}

func (p *Endpoint) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*thriftutil.Endpoint",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Endpoint)(nil)

func (p *Endpoint) Validate() error {
	return nil
}

// Attributes:
//  - Head
//  - Spanctx
//  - Control
// 
type Context struct {
	Head *Head `thrift:"head,1" db:"head" json:"head,omitempty"`
	Spanctx map[string]string `thrift:"spanctx,2" db:"spanctx" json:"spanctx,omitempty"`
	Control *Control `thrift:"control,3" db:"control" json:"control,omitempty"`
}

func NewContext() *Context {
	return &Context{}
}

var Context_Head_DEFAULT *Head

func (p *Context) GetHead() *Head {
	if !p.IsSetHead() {
		return Context_Head_DEFAULT
	}
	return p.Head
}

var Context_Spanctx_DEFAULT map[string]string


func (p *Context) GetSpanctx() map[string]string {
	return p.Spanctx
}

var Context_Control_DEFAULT *Control

func (p *Context) GetControl() *Control {
	if !p.IsSetControl() {
		return Context_Control_DEFAULT
	}
	return p.Control
}

func (p *Context) IsSetHead() bool {
	return p.Head != nil
}

func (p *Context) IsSetSpanctx() bool {
	return p.Spanctx != nil
}

func (p *Context) IsSetControl() bool {
	return p.Control != nil
}

func (p *Context) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Context) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Head = &Head{}
	if err := p.Head.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Head), err)
	}
	return nil
}

func (p *Context) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Spanctx = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Spanctx[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Context) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Control = &Control{}
	if err := p.Control.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Control), err)
	}
	return nil
}

func (p *Context) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Context"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Context) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHead() {
		if err := oprot.WriteFieldBegin(ctx, "head", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:head: ", p), err)
		}
		if err := p.Head.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Head), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:head: ", p), err)
		}
	}
	return err
}

func (p *Context) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanctx() {
		if err := oprot.WriteFieldBegin(ctx, "spanctx", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spanctx: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Spanctx)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Spanctx {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spanctx: ", p), err)
		}
	}
	return err
}

func (p *Context) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetControl() {
		if err := oprot.WriteFieldBegin(ctx, "control", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:control: ", p), err)
		}
		if err := p.Control.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Control), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:control: ", p), err)
		}
	}
	return err
}

func (p *Context) Equals(other *Context) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Head.Equals(other.Head) { return false }
	if len(p.Spanctx) != len(other.Spanctx) { return false }
	for k, _tgt := range p.Spanctx {
		_src2 := other.Spanctx[k]
		if _tgt != _src2 { return false }
	}
	if !p.Control.Equals(other.Control) { return false }
	return true
}

func (p *Context) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Context(%+v)", *p)
}

func (p *Context) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*thriftutil.Context",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Context)(nil)

func (p *Context) Validate() error {
	return nil
}

